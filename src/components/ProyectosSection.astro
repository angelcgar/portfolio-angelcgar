---
import { getProjectData } from '../lib/api';

const categorias = [
  'Web Application',
  'Juegos',
  'Dashboard',
  'E-commerce',
  'Backend',
] as const;

const proyectos = await getProjectData();
---

<section id="proyectos" class="py-20 bg-dark">
  <div class="container px-4 mx-auto">
    <h2 class="mb-12 text-3xl font-bold text-center">
      Mis <span class="text-accent">Proyectos</span>
    </h2>

    <!-- Filter buttons -->
    <div class="flex flex-wrap justify-center gap-2 mb-10">
      <button
        class="px-4 py-1 text-sm font-medium transition-colors duration-300 rounded-full cursor-pointer bg-accent text-darker filter-btn active"
        data-filter="important"
        id="filter-important"
        title="Mostrar proyectos importantes"
        aria-label="Mostrar proyectos importantes"
        aria-pressed="true"
        aria-controls="proyectos-grid"
        aria-expanded="true"
        aria-selected="true"
      >
        Mas importantes
      </button>

      {
        categorias.map((cat) => (
          <button
            class="px-4 py-1 text-sm transition-colors duration-300 rounded-full cursor-pointer bg-darker text-light hover:bg-dark hover:text-accent filter-btn"
            data-filter={cat}
            title={`Mostrar proyectos de la categoría ${cat}`}
            aria-label={`Mostrar proyectos de la categoría ${cat}`}
            aria-pressed="false"
            aria-controls="proyectos-grid"
            aria-expanded="false"
            aria-selected="false"
          >
            {cat}
          </button>
        ))
      }
    </div>

    <!-- Projects grid -->
    <div class="grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3">
      {
        proyectos.map((proyecto) => (
          <div
            class="bg-darker rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-all duration-300 hover:translate-y-[-5px] proyecto-card"
            data-category={proyecto.category}
            data-important={proyecto.isImportant ? 'true' : 'false'}
          >
            <div class="relative h-48 overflow-hidden">
              <img
                src={proyecto.image}
                alt={proyecto.title}
                class="object-cover w-full h-full transition-transform duration-500 hover:scale-110 hover:cursor-crosshair"
                loading="lazy"
                decoding="async"
                aria-label={`Imagen del proyecto ${proyecto.title}`}
                width="100%"
                height="100%"
                crossorigin="anonymous"
                referrerpolicy="no-referrer"
              />
            </div>
            <div class="p-6">
              <a href={`/proyectos/${proyecto.name}`}>
                <h3 class="inline-block mb-2 text-xl font-semibold underline hover:text-accent">
                  {proyecto.title}
                </h3>
              </a>
              <div class="flex flex-wrap gap-2 mb-4">
                {proyecto.technologies.map((tech) => (
                  <span class="px-2 py-1 text-xs rounded bg-dark text-secondary-foreground">
                    {tech}
                  </span>
                ))}
              </div>
              <div class="flex items-center justify-between">
                <a
                  href={proyecto.repository}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="px-4 py-2 text-sm font-medium transition-colors duration-300 rounded bg-accent text-darker hover:bg-accent/90 hover:shadow-lg inline-flex items-center"
                >
                  <span class="mr-1">Ver Código</span>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke-width="1.5"
                    stroke="currentColor"
                    class="w-4 h-4"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      d="M17.25 6.75L22.5 12l-5.25 5.25m-10.5 0L1.5 12l5.25-5.25m7.5-3l-4.5 16.5"
                    />
                  </svg>
                </a>
                <a
                  href={proyecto.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="px-4 py-2 text-sm font-medium transition-colors duration-300 rounded bg-accent text-darker hover:bg-accent/90 hover:shadow-lg inline-flex items-center"
                >
                  <span class="mr-1">Ver Demo</span>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    class="icon icon-tabler icons-tabler-outline icon-tabler-external-link"
                  >
                    <>
                      <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                      <path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6" />
                      <path d="M11 13l9 -9" />
                      <path d="M15 4h5v5" />
                    </>
                  </svg>
                </a>
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</section>

<script>
  // Seleccionamos los elementos necesarios
  const filterButtons =
    document.querySelectorAll<HTMLButtonElement>('.filter-btn');
  const projectCards =
    document.querySelectorAll<HTMLDivElement>('.proyecto-card');

  // Función para actualizar el estado visual de los botones
  const updateActiveButton = (activeButton: HTMLButtonElement) => {
    // Removemos las clases activas de todos los botones
    filterButtons.forEach((button) => {
      button.classList.remove('active', 'bg-accent', 'text-darker');
      button.classList.add(
        'bg-darker',
        'text-light',
        'hover:bg-dark',
        'hover:text-accent',
      );
    });

    // Añadimos las clases activas al botón seleccionado
    activeButton.classList.add('active', 'bg-accent', 'text-darker');
    activeButton.classList.remove(
      'bg-darker',
      'text-light',
      'hover:bg-dark',
      'hover:text-accent',
    );
  };

  // Función para filtrar los proyectos según el filtro seleccionado
  const filterProjects = (filter: string | null) => {
    projectCards.forEach((card) => {
      const isImportant = card.getAttribute('data-important') === 'true';
      const category = card.getAttribute('data-category');

      // Mostramos u ocultamos las tarjetas según el filtro
      if (filter === 'important') {
        card.style.display = isImportant ? 'block' : 'none';
      } else if (filter === category) {
        card.style.display = 'block';
      } else {
        card.style.display = 'none';
      }
    });
  };

  // Añadimos el evento de clic a cada botón de filtro
  filterButtons.forEach((button) => {
    button.addEventListener('click', () => {
      const filter = button.getAttribute('data-filter');

      // Actualizamos el botón activo y filtramos los proyectos
      updateActiveButton(button);
      filterProjects(filter);
    });
  });

  // Simulamos un clic inicial en el botón "Más importantes"
  const filterImportantButton = document.getElementById(
    'filter-important',
  ) as HTMLButtonElement;
  if (filterImportantButton) {
    filterImportantButton.click();
  }
</script>
